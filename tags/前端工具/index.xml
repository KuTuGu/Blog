<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端工具 on KuTuGu的博客</title><link>/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/</link><description>Recent content in 前端工具 on KuTuGu的博客</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Thu, 03 Sep 2020 08:57:49 +0800</lastBuildDate><atom:link href="/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>前端日志工具小结</title><link>/post/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%BF%97%E5%B7%A5%E5%85%B7%E5%B0%8F%E7%BB%93/</link><pubDate>Thu, 03 Sep 2020 08:57:49 +0800</pubDate><guid>/post/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%BF%97%E5%B7%A5%E5%85%B7%E5%B0%8F%E7%BB%93/</guid><description>前端日志工具小结 在腾讯实习期间的一个主要工作是负责一个前端日志工具库以及底层脚手架工具的重构
项目内容 Feflow https://github.com/Tencent/feflow
https://feflowjs.com/
Feflow是腾讯开发的一款基于模板进行快速开发的开源脚手架工具，主要目的是为了提升工程效率和保障工作流的规范性。
Feflow提供了基础的init、dev、build、test和deploy等命令，同时在模板的基础上，利用扩展的插件模块实现零配置快速上手、自定义命令等目的，具体文档可参考上文链接。
Feflow底层插件 第一个接触的项目是feflow的一个底层插件模块， 这个库主要用于支持纯JS库代码打包(rollup)的各种script命令。
我的工作是为该插件提供ts检查、lint和unit test等功能，具体的代码实现并无太大问题，只是由平时常用的CLI命令改为编写相应的script脚本，通过API的方式来调用。
只遇到了一个配置文件路径的坑:
配置文件路径问题 首先来看一下项目文件路径的设计：
npm包依赖被安装在node_modules文件夹中，feflow插件自然也不例外，其中存放着我们已经写好的ts、lint等配置文件，保证使用到这个模块的各个上层项目都能保持一致的代码规范。
但在一些特殊情况下也需要开发者可以在外层项目通过配置文件来覆盖内层规则。
所以具体的配置文件规则需要我们由外至内做判断。
基本原理如上所述，但在具体实现时出现了一些问题：
ts编译，通过脚本调用API读取配置文件进行编译。但ts配置文件只支持tsconfig.json。 我们需要的是通过js来动态获取具体的配置文件路径，json文件格式显然无法满足。
既然无法直接配置，那我们只能考虑在编译前做些“手脚”：
我们可以通过node脚本在编译前即时编写出一个tsconfig.json供ts读取检查
采用一些第三方插件，有两个方向：
babel（@babel/preset-typescript）
rollup（rollup-plugin-typescript2 / @rollup/plugin-typescript ）
babel插件在打包时会忽略掉ts检查，如果要进行ts检查需要CLI手动调用tsc命令；
故采用rollup插件，通过此插件API的include参数传入配置文件路径。
日志工具函数 第二个项目是工具函数库，下层采用feflow插件进行项目规范化，上层为日志库提供常用工具集，如AOP、Event等。除了功能代码，还基于上个项目为其编写ts、unit test等。
日志库 第三个项目是日志库，主要对于前端页面进行监听，采集加载数据、请求和用户行为用于优化页面，支持全监听和手动埋点。
其实前端日志包括开源产品已经有很多成熟方案了，但在具体项目使用中总有一些不如意的地方，比如：
内部实现高耦合，不易扩展 日志数据固定、取均值或随机采样，无法获取精准、自定义数据 不支持各类型日志数据的不同处理 前后端高耦合，不易拆分 另一方面，这些工具大都提供一站式服务，对于希望使用多种不同工具的项目来说又显得过于臃肿。
所以这个库的目的不只是为了重复造轮子，除了具体功能外，还想要提供一种轻量级地前端日志上报的通用化解决方案。
为了实现上述需求，一个大体的思路如下：
内部功能模块采用插件化设计模式，支持自定义、自由替换 将日志生命周期划分为收集、处理、存储、上报等阶段，生命周期具体实现可以插件化替换 生命周期通过参数式策略模式组合为一个完整的日志流； 生命周期之间做低耦合处理，统一在日志流类中做观察者模式的注册，这样实现生命周期的链式注册、链式调用 对不同类型日志如客户端指纹、首屏加载、用户交互、资源请求等提供内置功能模块，其他类型扩展提供内部暴露的抽象类、虚函数来继承覆写 日志上报 第四部分是处理日志上报：</description></item></channel></rss>